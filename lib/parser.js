// Generated by CoffeeScript 1.7.1
(function() {
  var Directory, parseAdvanced, parseDirectory, parseForward, parseHost, parseHostname, parsePort, parseSite, parseSsl;

  Directory = require("./directory");

  module.exports = {
    getForwards: function(options) {
      var flag, forward, forwards, option, _i, _len;
      if (!options.length) {
        return [];
      }
      forwards = [];
      flag = null;
      for (_i = 0, _len = options.length; _i < _len; _i++) {
        option = options[_i];
        switch (option) {
          case "-a":
          case "--advanced":
          case "-s":
          case "--site":
          case "--dir":
            if (flag) {
              throw new Error("Cannot follow " + flag + " with " + option);
            }
            flag = option;
            continue;
          default:
            forward = parseForward(option, flag);
            forwards.push(forward);
            flag = null;
        }
      }
      return forwards;
    }
  };

  parseForward = function(input, flag) {
    var error, forward, host, hostname, matches, path, port, proto, ssl, targetProto, _ref;
    if (["-a", "--advanced"].indexOf(flag) !== -1) {
      return parseAdvanced(input);
    }
    if (["-s", "--site"].indexOf(flag) !== -1) {
      return parseSite(input);
    }
    if (["--dir"].indexOf(flag) !== -1) {
      return parseDirectory(input);
    }
    matches = input.match(/^(https?):\/\/([\w\-\.]+)(:([\w\-\.]+))?(\/([^\s]+))?/);
    if (matches) {
      proto = matches[1];
      host = matches[2];
      port = matches[4];
      path = matches[6] || null;
      if (!port) {
        port = proto === "https" ? 443 : 80;
      } else {
        port = parsePort(port, input);
      }
      ssl = proto === "https";
      hostname = host;
      if ((proto === "https" && port === 80) || (proto === "http" && port === 443)) {
        targetProto = proto === "https" ? "http" : "https";
        error = "Sorry, port " + port + " is assumed to be " + targetProto + ", but you've specified " + proto + "\nYou can override this by using the --advanced switch";
        throw new Error(error);
      }
    } else {
      _ref = input.split(":"), host = _ref[0], port = _ref[1];
      host = parseHost(host, input);
      port = parsePort(port, input);
      path = null;
      ssl = port === 443;
      hostname = host;
    }
    return forward = {
      subdomain: null,
      private_host: host,
      private_port: port,
      forwarded_hostname: hostname,
      ssl: ssl,
      path: path
    };
  };

  parseSite = function(input) {
    var forward;
    if (input.search(/^\w+$/) !== 0) {
      throw new Error("'" + input + "' does not appear to be a valid site identifier");
    }
    return forward = {
      subdomain: input,
      private_host: null,
      private_port: null,
      forwarded_hostname: null
    };
  };

  parseAdvanced = function(input) {
    var forward, host, hostname, parts, port, ssl;
    port = 80;
    hostname = null;
    ssl = false;
    parts = input.split(":");
    switch (parts.length) {
      case 1:
        host = input;
        break;
      case 2:
        host = parts[0], port = parts[1];
        port = parsePort(port, input);
        break;
      case 3:
        host = parts[0], port = parts[1], hostname = parts[2];
        port = parsePort(port, input);
        hostname = parseHostname(hostname, input);
        break;
      case 4:
        host = parts[0], port = parts[1], hostname = parts[2], ssl = parts[3];
        port = parsePort(port, input);
        hostname = parseHostname(hostname, input);
        ssl = parseSsl(ssl);
        break;
      default:
        throw new Error("Advanced syntax requires input in the form server:port:hostname:ssl");
    }
    return forward = {
      subdomain: null,
      private_host: host,
      private_port: port,
      forwarded_hostname: hostname,
      ssl: ssl
    };
  };

  parsePort = function(port, input) {
    if (!port) {
      return 80;
    }
    if (port.search(/^\d+$/) === 0) {
      return +port;
    }
    throw new Error("'" + port + "' does not appear to be a valid port number");
  };

  parseHost = function(host, input) {
    if (host) {
      return host;
    }
    throw new Error("Please specify a host (input string: '" + input + "')");
  };

  parseHostname = function(host, input) {
    if (host) {
      return host;
    }
    throw new Error("Please specify a host name (input string: '" + input + "')");
  };

  parseSsl = function(flag, input) {
    if (flag.search(/^on|off$/) === -1) {
      throw new Error("Please specify SSL as either 'on' or 'off'");
    }
    return flag === "on";
  };

  parseDirectory = function(input) {
    var forward, path;
    path = Directory.resolve(input);
    if (!Directory.isValid(path)) {
      throw new Error("'" + input + "' does not appear to be a valid directory");
    }
    return forward = {
      "static": true,
      directory: path,
      subdomain: null,
      private_host: null,
      private_port: null,
      ssl: false
    };
  };

}).call(this);
